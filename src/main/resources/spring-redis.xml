<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
    <context:component-scan base-package="tv.love.service.redis" />
        
    <!-- 
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>  
      
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" 
        p:port="${redis.port}" 
        p:password="${redis.pass}"  
        p:pool-config-ref="poolConfig"/>  
        
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean>
    
     -->
        
        
		<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
			<property name="maxTotal" value="${redis.maxTotal}"/>
			<property name="maxIdle" value="${redis.maxIdle}"/>
			<property name="minIdle" value="${redis.minIdle}"/>
			<property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
			<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
			<property name="testOnReturn" value="${redis.testOnReturn}"/>
			<property name="testWhileIdle" value="${redis.testWhileIdle}"/>
		</bean>
		
		<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" destroy-method="destroy">
			<constructor-arg ref="jedisPoolConfig"/>
			<constructor-arg>
				<list>
					<bean class="redis.clients.jedis.JedisShardInfo">
						<constructor-arg value="${redis.host}"/>
						<constructor-arg type="int" value="${redis.port}"/>
						<property name="password" value="${redis.pass}" />
					</bean>
				</list>
			</constructor-arg>
		</bean>
        
        <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">  
		        <constructor-arg ref="jedisPoolConfig" />    
		        <constructor-arg value="${redis.host}" />    
		        <constructor-arg type="int" value="${redis.port}" /> 
		        <constructor-arg type="int" value="${redis.timeout}" /> 
		        <constructor-arg value="${redis.pass}" /> 
		</bean> 
        
</beans>